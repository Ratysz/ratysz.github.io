var searchIndex = {};
searchIndex["ggez"] = {"doc":"What is this?","items":[[3,"Context","ggez","A `Context` is an object that holds on to global resources. It basically tracks hardware state such as the screen, audio system, timers, and so on.  Generally this type is not thread- safe and only one `Context` can exist at a time.  Trying to create another one will fail.",null,null],[12,"conf","","The Conf object the Context was created with",0,null],[12,"filesystem","","Filesystem state",0,null],[12,"continuing","","Controls whether or not the events loop should be running.",0,null],[12,"timer_context","","Timer state",0,null],[12,"audio_context","","Audio context",0,null],[12,"keyboard_context","","Keyboard context",0,null],[12,"mouse_context","","Mouse context",0,null],[12,"gamepad_context","","Gamepad context",0,null],[12,"default_font","","Default font",0,null],[3,"ContextBuilder","","A builder object for creating a context.",null,null],[0,"audio","","Provides an interface to output sound to the user's speakers.",null,null],[3,"AudioContext","ggez::audio","A struct that contains all information for tracking sound info.",null,null],[3,"SoundData","","Static sound data stored in memory. It is Arc'ed, so cheap to clone.",null,null],[3,"Source","","A source of audio data connected to a particular `Channel`. Will stop playing when dropped.",null,null],[11,"new","","Create new AudioContext.",1,{"inputs":[],"output":{"generics":["audiocontext"],"name":"gameresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sounddata"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new SoundData from the file at the given path.",2,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[11,"from_bytes","","Copies the data in the given slice into a new SoundData object.",2,null],[11,"from_read","","Creates a SoundData from any Read object; this involves copying it into a buffer.",2,{"inputs":[{"name":"r"}],"output":{"name":"gameresult"}}],[11,"from","","",2,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"as_ref","","",2,null],[11,"new","","Create a new Source from the given file.",3,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[11,"from_data","","Creates a new Source using the given SoundData object.",3,{"inputs":[{"name":"context"},{"name":"sounddata"}],"output":{"name":"gameresult"}}],[11,"play","","Plays the Source.",3,{"inputs":[{"name":"self"}],"output":{"name":"gameresult"}}],[11,"set_repeat","","Sets the source to repeat playback infinitely on next `play()`",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"repeat","","Gets whether or not the source is set to repeat.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pause","","Pauses playback",3,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Resumes playback",3,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops playback",3,{"inputs":[{"name":"self"}],"output":null}],[11,"stopped","","Returns whether or not the source is stopped -- that is, has no more data to play.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"volume","","Gets the current volume",3,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_volume","","Sets the current volume",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"paused","","Get whether or not the source is paused",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"playing","","Get whether or not the source is playing (ie, not paused and not stopped)",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"conf","ggez","Functions for loading and saving engine configurations.",null,null],[3,"WindowMode","ggez::conf","A builder structure containing window settings that can be changed at runtime via `graphics::set_mode()`.",null,null],[12,"dimensions","","Window's inner dimensions (drawable area).",4,null],[12,"min_dimensions","","Window's minimum dimensions; `None` is no limit.",4,null],[12,"max_dimensions","","Window's maximum dimensions; `None` is no limit.",4,null],[12,"fullscreen_type","","Fullscreen type.",4,null],[12,"maximized","","Whether or not to maximize the window.",4,null],[12,"hidden","","Whether or not the window is hidden.",4,null],[12,"borderless","","Whether or not to show window decorations.",4,null],[12,"always_on_top","","Whether or not the window is pinned to always be on top of other windows.",4,null],[3,"WindowSetup","","A builder structure containing window settings that must be set at init time and (mostly) cannot be changed afterwards.",null,null],[12,"title","","Window title.",5,null],[12,"icon","","A file path to the window's icon. It is rooted in the `resources` directory (see the `filesystem` module for details), and an empty string results in a blank/default icon.",5,null],[12,"resizable","","Whether or not the window is resizable.",5,null],[12,"transparent","","Whether or not should the window's background be transparent.",5,null],[12,"compatibility_profile","","Whether or not should the GL compatibility profile be used.",5,null],[12,"vsync","","Whether or not to enable vsync (vertical synchronization).",5,null],[12,"samples","","Number of samples for multisample anti-aliasing.",5,null],[12,"srgb","","Whether or not to enable sRGB.",5,null],[3,"Conf","","Structure containing configuration data for the engine.",null,null],[12,"window_mode","","Window setting information that can be set at runtime.",6,null],[12,"window_setup","","Window setting information that must be set at init-time.",6,null],[12,"backend","","Graphics backend.",6,null],[4,"FullscreenType","","Possible fullscreen modes.",null,null],[13,"Off","","Windowed mode.",7,null],[13,"True","","Real fullscreen.",7,null],[13,"Desktop","","Windowed fullscreen, generally preferred over real fullscreen these days 'cause it plays nicer with multiple monitors.",7,null],[4,"MonitorId","","Identifies a monitor connected to the system.",null,null],[13,"Current","","Monitor the window is currently in.",8,null],[13,"Index","","Monitor retrieved by it's index in the system.",8,null],[4,"Backend","","Possible graphics backends.",null,null],[13,"OpenGL","","Classical OpenGL, available on Windows, Linux, OS/X.",9,null],[4,"NumSamples","","Possible number of samples for multisample anti-aliasing (MSAA).",null,null],[13,"One","","One sample.",10,null],[13,"Two","","Two samples.",10,null],[13,"Four","","Four samples.",10,null],[13,"Eight","","Eight samples.",10,null],[13,"Sixteen","","Sixteen samples.",10,null],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"generics":["fullscreentype"],"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"generics":["windowmode"],"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"generics":["windowsetup"],"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"generics":["backend"],"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"generics":["conf"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fullscreentype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"monitorid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"monitorid"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"windowmode"}}],[11,"default","","Return `WindowMode { dimensions: (800, 600), min_dimensions: None, max_dimensions: None, fullscreen_type: FullscreenType::Off, maximized: false, hidden: false, borderless: false, always_on_top: false }`",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"windowmode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"windowmode"}],"output":{"name":"bool"}}],[11,"dimensions","","Set default window size, or screen resolution in true fullscreen mode.",4,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"min_dimensions","","Set minimum window dimensions for windowed mode.",4,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_dimensions","","Set maximum window dimensions for windowed mode.",4,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"fullscreen_type","","Set the fullscreen type.",4,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"self"}}],[11,"maximized","","Set if window should be maximized.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Set if window should be hidden.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"borderless","","Set whether or not to show window decorations.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"always_on_top","","Set if window should pinned to always be on top of other windows.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"windowsetup"}}],[11,"default","","Return `WindowSetup { title: \"An easy, good game\".to_owned(), icon: \"\".to_owned(), resizable: false, transparent: false, compatibility_profile: false, vsync: true, samples: NumSamples::One, srgb: false }`",5,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"windowsetup"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"windowsetup"}],"output":{"name":"bool"}}],[11,"title","","Set window's title.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"icon","","Set the window's icon.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"resizable","","Set whether or not the window is resizable.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"transparent","","Set if window's background should be transparent.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"compatibility_profile","","Set if the GL compatibility profile should be used.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"vsync","","Set if vsync is enabled.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"samples","","Set number of samples for multisample anti-aliasing.",5,{"inputs":[{"name":"self"},{"name":"numsamples"}],"output":{"name":"self"}}],[11,"srgb","","Set if sRGB should be enabled.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"backend"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"backend"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"backend"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"numsamples"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"numsamples"}],"output":{"name":"bool"}}],[11,"from_u32","","Create a NumSamples from a number. Returns None if `i` is invalid.",10,{"inputs":[{"name":"u32"}],"output":{"generics":["numsamples"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"conf"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"conf"}],"output":{"name":"bool"}}],[11,"default","","Return `Conf { window_mode: Default::default(), window_setup: Default::default(), backend: Backend::OpenGL(3, 2) }`",6,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new default config. Identical to `Conf::default()`.",6,{"inputs":[],"output":{"name":"self"}}],[11,"from_toml_file","","Load a TOML file from the given `Read` and attempts to parse a `Conf` from it.",6,{"inputs":[{"name":"r"}],"output":{"generics":["conf"],"name":"gameresult"}}],[11,"to_toml_file","","Saves the `Conf` to the given `Write` object, formatted as valid TOML.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"gameresult"}}],[11,"fmt","ggez","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"load_from_conf","","Tries to create a new Context by loading a config file from its default path, using the given `Conf` object as a default if none is found.",0,{"inputs":[{"name":"str"},{"name":"str"},{"name":"conf"}],"output":{"name":"gameresult"}}],[11,"quit","","Terminates `ggez::run()` loop by setting `Context::continuing` to `false`.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"process_event","","Feeds an `Event` into the `Context` so it can update any internal state it needs to, such as detecting window resizes.  If you are rolling your own event loop, you should call this on the events you receive before processing them yourself.",0,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ContextBuilder",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"window_setup","","Sets the window setup settings",11,{"inputs":[{"name":"self"},{"name":"windowsetup"}],"output":{"name":"self"}}],[11,"window_mode","","Sets the window mode settings",11,{"inputs":[{"name":"self"},{"name":"windowmode"}],"output":{"name":"self"}}],[11,"backend","","Sets the graphics backend",11,{"inputs":[{"name":"self"},{"name":"backend"}],"output":{"name":"self"}}],[11,"add_resource_path","","Add a new read-only filesystem path to the places to search for resources.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_conf_file","","Specifies whether or not to load the `conf.toml` file if it exists and use its settings to override the provided values. Defaults to `true` which is usually what you want, but being able to fiddle with it is sometimes useful for debugging.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"build","","Build the Context.",11,{"inputs":[{"name":"self"}],"output":{"name":"gameresult"}}],[0,"error","","Error types and conversion functions.",null,null],[4,"GameError","ggez::error","An enum containing all kinds of game framework errors.",null,null],[13,"FilesystemError","","An error in the filesystem layout",12,null],[13,"ConfigError","","An error in the config file",12,null],[13,"EventLoopError","","Happens when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",12,null],[13,"ResourceLoadError","","An error trying to parse a resource",12,null],[13,"ResourceNotFound","","Unable to find a resource; the Vec is the paths it searched for and associated errors",12,null],[13,"RenderError","","Something went wrong in the renderer",12,null],[13,"AudioError","","Something went wrong in the audio playback",12,null],[13,"WindowError","","Something went wrong trying to create a window",12,null],[13,"IOError","","Something went wrong trying to read from a file",12,null],[13,"FontError","","Something went wrong trying to load/render a font",12,null],[13,"VideoError","","Something went wrong applying video settings.",12,null],[13,"ShaderProgramError","","Something went wrong compiling shaders",12,null],[13,"GamepadError","","Something went wrong with Gilrs",12,null],[13,"UnknownError","","Something else happened; this is generally a bug.",12,null],[6,"GameResult","","A convenient result type consisting of a return type and a `GameError`",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"appdirserror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"ziperror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"decodererror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"imageerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"generics":["string"],"name":"pipelinestateerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"copyerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"combinederror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"creationerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"updateerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"programerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"eventsloopclosed"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"creationerror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"contexterror"}],"output":{"name":"gameerror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"gameerror"}}],[0,"event","ggez","The `event` module contains traits and structs to actually run your game mainloop and handle top-level state, as well as handle input events such as keyboard and mouse.",null,null],[4,"KeyCode","ggez::event","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",13,null],[13,"Key2","","The '2' key over the letters.",13,null],[13,"Key3","","The '3' key over the letters.",13,null],[13,"Key4","","The '4' key over the letters.",13,null],[13,"Key5","","The '5' key over the letters.",13,null],[13,"Key6","","The '6' key over the letters.",13,null],[13,"Key7","","The '7' key over the letters.",13,null],[13,"Key8","","The '8' key over the letters.",13,null],[13,"Key9","","The '9' key over the letters.",13,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",13,null],[13,"A","","",13,null],[13,"B","","",13,null],[13,"C","","",13,null],[13,"D","","",13,null],[13,"E","","",13,null],[13,"F","","",13,null],[13,"G","","",13,null],[13,"H","","",13,null],[13,"I","","",13,null],[13,"J","","",13,null],[13,"K","","",13,null],[13,"L","","",13,null],[13,"M","","",13,null],[13,"N","","",13,null],[13,"O","","",13,null],[13,"P","","",13,null],[13,"Q","","",13,null],[13,"R","","",13,null],[13,"S","","",13,null],[13,"T","","",13,null],[13,"U","","",13,null],[13,"V","","",13,null],[13,"W","","",13,null],[13,"X","","",13,null],[13,"Y","","",13,null],[13,"Z","","",13,null],[13,"Escape","","The Escape key, next to F1.",13,null],[13,"F1","","",13,null],[13,"F2","","",13,null],[13,"F3","","",13,null],[13,"F4","","",13,null],[13,"F5","","",13,null],[13,"F6","","",13,null],[13,"F7","","",13,null],[13,"F8","","",13,null],[13,"F9","","",13,null],[13,"F10","","",13,null],[13,"F11","","",13,null],[13,"F12","","",13,null],[13,"F13","","",13,null],[13,"F14","","",13,null],[13,"F15","","",13,null],[13,"Snapshot","","Print Screen/SysRq.",13,null],[13,"Scroll","","Scroll Lock.",13,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",13,null],[13,"Insert","","`Insert`, next to Backspace.",13,null],[13,"Home","","",13,null],[13,"Delete","","",13,null],[13,"End","","",13,null],[13,"PageDown","","",13,null],[13,"PageUp","","",13,null],[13,"Left","","",13,null],[13,"Up","","",13,null],[13,"Right","","",13,null],[13,"Down","","",13,null],[13,"Back","","The Backspace key, right over Enter.",13,null],[13,"Return","","The Enter key.",13,null],[13,"Space","","The space bar.",13,null],[13,"Compose","","The \"Compose\" key on Linux.",13,null],[13,"Caret","","",13,null],[13,"Numlock","","",13,null],[13,"Numpad0","","",13,null],[13,"Numpad1","","",13,null],[13,"Numpad2","","",13,null],[13,"Numpad3","","",13,null],[13,"Numpad4","","",13,null],[13,"Numpad5","","",13,null],[13,"Numpad6","","",13,null],[13,"Numpad7","","",13,null],[13,"Numpad8","","",13,null],[13,"Numpad9","","",13,null],[13,"AbntC1","","",13,null],[13,"AbntC2","","",13,null],[13,"Add","","",13,null],[13,"Apostrophe","","",13,null],[13,"Apps","","",13,null],[13,"At","","",13,null],[13,"Ax","","",13,null],[13,"Backslash","","",13,null],[13,"Calculator","","",13,null],[13,"Capital","","",13,null],[13,"Colon","","",13,null],[13,"Comma","","",13,null],[13,"Convert","","",13,null],[13,"Decimal","","",13,null],[13,"Divide","","",13,null],[13,"Equals","","",13,null],[13,"Grave","","",13,null],[13,"Kana","","",13,null],[13,"Kanji","","",13,null],[13,"LAlt","","",13,null],[13,"LBracket","","",13,null],[13,"LControl","","",13,null],[13,"LMenu","","",13,null],[13,"LShift","","",13,null],[13,"LWin","","",13,null],[13,"Mail","","",13,null],[13,"MediaSelect","","",13,null],[13,"MediaStop","","",13,null],[13,"Minus","","",13,null],[13,"Multiply","","",13,null],[13,"Mute","","",13,null],[13,"MyComputer","","",13,null],[13,"NavigateForward","","",13,null],[13,"NavigateBackward","","",13,null],[13,"NextTrack","","",13,null],[13,"NoConvert","","",13,null],[13,"NumpadComma","","",13,null],[13,"NumpadEnter","","",13,null],[13,"NumpadEquals","","",13,null],[13,"OEM102","","",13,null],[13,"Period","","",13,null],[13,"PlayPause","","",13,null],[13,"Power","","",13,null],[13,"PrevTrack","","",13,null],[13,"RAlt","","",13,null],[13,"RBracket","","",13,null],[13,"RControl","","",13,null],[13,"RMenu","","",13,null],[13,"RShift","","",13,null],[13,"RWin","","",13,null],[13,"Semicolon","","",13,null],[13,"Slash","","",13,null],[13,"Sleep","","",13,null],[13,"Stop","","",13,null],[13,"Subtract","","",13,null],[13,"Sysrq","","",13,null],[13,"Tab","","",13,null],[13,"Underline","","",13,null],[13,"Unlabeled","","",13,null],[13,"VolumeDown","","",13,null],[13,"VolumeUp","","",13,null],[13,"Wake","","",13,null],[13,"WebBack","","",13,null],[13,"WebFavorites","","",13,null],[13,"WebForward","","",13,null],[13,"WebHome","","",13,null],[13,"WebRefresh","","",13,null],[13,"WebSearch","","",13,null],[13,"WebStop","","",13,null],[13,"Yen","","",13,null],[13,"Copy","","",13,null],[13,"Paste","","",13,null],[13,"Cut","","",13,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",14,null],[13,"Right","","",14,null],[13,"Middle","","",14,null],[13,"Other","","",14,null],[4,"Axis","","Gamepad's elements which state can be represented by value from -1.0 to 1.0.",null,null],[13,"LeftStickX","","",15,null],[13,"LeftStickY","","",15,null],[13,"LeftZ","","",15,null],[13,"RightStickX","","",15,null],[13,"RightStickY","","",15,null],[13,"RightZ","","",15,null],[13,"DPadX","","",15,null],[13,"DPadY","","",15,null],[13,"Unknown","","",15,null],[4,"Button","","Gamepad's elements which state can be represented by value from 0.0 to 1.0.",null,null],[13,"South","","",16,null],[13,"East","","",16,null],[13,"North","","",16,null],[13,"West","","",16,null],[13,"C","","",16,null],[13,"Z","","",16,null],[13,"LeftTrigger","","",16,null],[13,"LeftTrigger2","","",16,null],[13,"RightTrigger","","",16,null],[13,"RightTrigger2","","",16,null],[13,"Select","","",16,null],[13,"Start","","",16,null],[13,"Mode","","",16,null],[13,"LeftThumb","","",16,null],[13,"RightThumb","","",16,null],[13,"DPadUp","","",16,null],[13,"DPadDown","","",16,null],[13,"DPadLeft","","",16,null],[13,"DPadRight","","",16,null],[13,"Unknown","","",16,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[5,"run","","Runs the game's main loop, calling event callbacks on the given state object as events occur.",null,{"inputs":[{"name":"context"},{"name":"eventsloop"},{"name":"s"}],"output":{"name":"gameresult"}}],[0,"winit_event","","`winit` events; nested in a module for re-export neatness.",null,null],[4,"DeviceEvent","ggez::event::winit_event","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",17,null],[13,"Removed","","",17,null],[13,"MouseMotion","","Change in physical position of a pointing device.",17,null],[12,"delta","ggez::event::winit_event::DeviceEvent","(x, y) change in position in unspecified units.",17,null],[13,"MouseWheel","ggez::event::winit_event","Physical scroll event",17,null],[12,"delta","ggez::event::winit_event::DeviceEvent","",17,null],[13,"Motion","ggez::event::winit_event","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",17,null],[12,"axis","ggez::event::winit_event::DeviceEvent","",17,null],[12,"value","","",17,null],[13,"Button","ggez::event::winit_event","",17,null],[12,"button","ggez::event::winit_event::DeviceEvent","",17,null],[12,"state","","",17,null],[13,"Key","ggez::event::winit_event","",17,null],[13,"Text","","",17,null],[12,"codepoint","ggez::event::winit_event::DeviceEvent","",17,null],[4,"ElementState","ggez::event::winit_event","Describes the input state of a key.",null,null],[13,"Pressed","","",18,null],[13,"Released","","",18,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",19,null],[12,"window_id","ggez::event::winit_event::Event","",19,null],[12,"event","","",19,null],[13,"DeviceEvent","ggez::event::winit_event","",19,null],[12,"device_id","ggez::event::winit_event::Event","",19,null],[12,"event","","",19,null],[13,"Awakened","ggez::event::winit_event","",19,null],[13,"Suspended","","The application has been suspended or resumed.",19,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",20,null],[12,"state","","",20,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",20,null],[12,"modifiers","","Modifier keys active at the time of this input.",20,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",21,null],[12,"ctrl","","The \"control\" key",21,null],[12,"alt","","The \"alt\" key",21,null],[12,"logo","","The \"logo\" key",21,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",22,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",22,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",23,null],[13,"Moved","","",23,null],[13,"Ended","","",23,null],[13,"Cancelled","","",23,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed. Contains the client area's new dimensions.",24,null],[13,"Moved","","The position of the window has changed. Contains the window's new position.",24,null],[13,"CloseRequested","","The window has been requested to close.",24,null],[13,"Destroyed","","The window has been destroyed.",24,null],[13,"DroppedFile","","A file has been dropped into the window.",24,null],[13,"HoveredFile","","A file is being hovered over the window.",24,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",24,null],[13,"ReceivedCharacter","","The window received a unicode character.",24,null],[13,"Focused","","The window gained or lost focus.",24,null],[13,"KeyboardInput","","An event from the keyboard has been received.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"input","","",24,null],[13,"CursorMoved","ggez::event::winit_event","The cursor has moved on the window.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",24,null],[12,"modifiers","","",24,null],[13,"CursorEntered","ggez::event::winit_event","The cursor has entered the window.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[13,"CursorLeft","ggez::event::winit_event","The cursor has left the window.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[13,"MouseWheel","ggez::event::winit_event","A mouse wheel movement or touchpad scroll occurred.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"delta","","",24,null],[12,"phase","","",24,null],[12,"modifiers","","",24,null],[13,"MouseInput","ggez::event::winit_event","An mouse button press has been received.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"state","","",24,null],[12,"button","","",24,null],[12,"modifiers","","",24,null],[13,"TouchpadPressure","ggez::event::winit_event","Touchpad pressure event.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"pressure","","",24,null],[12,"stage","","",24,null],[13,"AxisMotion","ggez::event::winit_event","Motion on some analog axis. May report data redundant to other, more specific events.",24,null],[12,"device_id","ggez::event::winit_event::WindowEvent","",24,null],[12,"axis","","",24,null],[12,"value","","",24,null],[13,"Refresh","ggez::event::winit_event","The window needs to be redrawn.",24,null],[13,"Touch","","Touch event has been received",24,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",24,null],[8,"EventHandler","ggez::event","A trait defining event callbacks; your primary interface with `ggez`'s event loop.  Have a type implement this trait and override at least the update() and draw() methods, then pass it to `event::run()` to run the game's mainloop.",null,null],[10,"update","","Called upon each physics update to the game. This should be where the game's logic takes place.",25,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"gameresult"}}],[10,"draw","","Called to do the drawing of your game. You probably want to start this with `graphics::clear()` and end it with `graphics::present()` and `timer::yield_now()`",25,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"gameresult"}}],[11,"mouse_button_down_event","","A mouse button was pressed",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"mousebutton"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"mouse_button_up_event","","A mouse button was released",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"mousebutton"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"mouse_motion_event","","The mouse was moved; it provides both absolute x and y coordinates in the window, and relative x and y coordinates compared to its last position.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"mouse_wheel_event","","The mousewheel was scrolled, vertically (y, positive away from and negative toward the user) or horizontally (x, positive to the right and negative to the left).",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"key_down_event","","A keyboard button was pressed.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"keycode"},{"name":"keymods"},{"name":"bool"}],"output":null}],[11,"key_up_event","","A keyboard button was released.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"keycode"},{"name":"keymods"}],"output":null}],[11,"text_input_event","","A unicode character was received, usually from keyboard input. This is the intended way of facilitating text input.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"char"}],"output":null}],[11,"controller_button_down_event","","A controller button was pressed; id identifies which controller.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"button"},{"name":"usize"}],"output":null}],[11,"controller_button_up_event","","A controller button was released.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"button"},{"name":"usize"}],"output":null}],[11,"controller_axis_event","","A controller axis moved.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"axis"},{"name":"f32"},{"name":"usize"}],"output":null}],[11,"focus_event","","Called when the window is shown or hidden.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"bool"}],"output":null}],[11,"quit_event","","Called upon a quit event.  If it returns true, the game does not exit.",25,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"resize_event","","Called when the user resizes the window. Is not called when you resize it yourself with `graphics::set_mode()` though.",25,{"inputs":[{"name":"self"},{"name":"context"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"filesystem","ggez","A cross-platform interface to the filesystem.",null,null],[3,"OpenOptions","ggez::filesystem","Options for opening files",null,null],[3,"Filesystem","","A structure that contains the filesystem state and cache.",null,null],[4,"File","","Represents a file, either in the filesystem, or in the resources zip file, or whatever.",null,null],[13,"VfsFile","","A wrapper for a VFile trait object.",26,null],[5,"open","","Opens the given path and returns the resulting `File` in read-only mode.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"generics":["file"],"name":"gameresult"}}],[5,"open_options","","Opens a file in the user directory with the given `filesystem::OpenOptions`. Note that even if you open a file read-only, it can only access files in the user directory.",null,{"inputs":[{"name":"context"},{"name":"p"},{"name":"openoptions"}],"output":{"generics":["file"],"name":"gameresult"}}],[5,"create","","Creates a new file in the user directory and opens it to be written to, truncating it if it already exists.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"generics":["file"],"name":"gameresult"}}],[5,"create_dir","","Create an empty directory in the user dir with the given name.  Any parents to that directory that do not exist will be created.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[5,"delete","","Deletes the specified file in the user dir.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[5,"delete_dir","","Deletes the specified directory in the user dir, and all its contents!",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[5,"exists","","Check whether a file or directory exists.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_file","","Check whether a path points at a file.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_dir","","Check whether a path points at a directory.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"bool"}}],[5,"get_user_data_dir","","Return the full path to the user data directory",null,{"inputs":[{"name":"context"}],"output":{"name":"path"}}],[5,"get_user_config_dir","","Return the full path to the user config directory",null,{"inputs":[{"name":"context"}],"output":{"name":"path"}}],[5,"get_resources_dir","","Returns the full path to the resource directory (even if it doesn't exist)",null,{"inputs":[{"name":"context"}],"output":{"name":"path"}}],[5,"read_dir","","Returns a list of all files and directories in the resource directory, in no particular order.",null,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"generics":["box"],"name":"gameresult"}}],[5,"print_all","","Prints the contents of all data directories. Useful for debugging.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"log_all","","Outputs the contents of all data directories, using the \"info\" log level of the `log` crate. Useful for debugging.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"mount","","Adds the given (absolute) path to the list of directories it will search to look for resources.",null,{"inputs":[{"name":"context"},{"name":"path"},{"name":"bool"}],"output":null}],[5,"read_config","","Looks for a file named \"/conf.toml\" in any resource directory and loads it if it finds it. If it can't read it for some reason, returns an error.",null,{"inputs":[{"name":"context"}],"output":{"generics":["conf"],"name":"gameresult"}}],[5,"write_config","","Takes a `conf::Conf` object and saves it to the user directory, overwriting any file already there.",null,{"inputs":[{"name":"context"},{"name":"conf"}],"output":{"name":"gameresult"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new Filesystem instance, using the given `id` and (on some platforms) the `author` as a portion of the user directory path.  This function is called automatically by ggez, the end user should never need to call it.",27,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["filesystem"],"name":"gameresult"}}],[0,"gamepad","ggez","Gamepad utility functions.",null,null],[3,"GamepadContext","ggez::gamepad","A structure that contains gamepad state.",null,null],[5,"get_gamepad","","returns the `Gamepad` associated with an id.",null,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"generics":["gamepad"],"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graphics","ggez","The `graphics` module performs the actual drawing of images, text, and other objects with the `Drawable` trait.  It also handles basic loading of images and text.",null,null],[3,"FillOptions","ggez::graphics","Parameters for the fill tessellator.",null,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",29,null],[12,"fill_rule","","Set the fill rule.",29,null],[12,"compute_normals","","Whether or not to compute the normal vector at each vertex.",29,null],[12,"assume_no_intersections","","A fast path to avoid some expensive operations if the path is known to not have any self-intersections.",29,null],[12,"on_error","","What to do if the tessellator detects an error.",29,null],[4,"FillRule","","The fill rule defines how to determine what is inside and what is outside of the shape.",null,null],[13,"EvenOdd","","",30,null],[13,"NonZero","","",30,null],[4,"LineCap","","Line cap as defined by the SVG specification.",null,null],[13,"Butt","","The stroke for each subpath does not extend beyond its two endpoints. A zero length subpath will therefore not have any stroke.",31,null],[13,"Square","","At the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width. If a subpath has zero length, then the resulting effect is that the stroke for that subpath consists solely of a square with side length equal to the stroke width, centered at the subpath's point.",31,null],[13,"Round","","At each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width. If a subpath has zero length, then the resulting effect is that the stroke for that subpath consists solely of a full circle centered at the subpath's point.",31,null],[4,"LineJoin","","Line join as defined by the SVG specification.",null,null],[13,"Miter","","A sharp corner is to be used to join path segments.",32,null],[13,"MiterClip","","Same as a miter join, but if the miter limit is exceeded, the miter is clipped at a miter length equal to the miter limit value multiplied by the stroke width.",32,null],[13,"Round","","A round corner is to be used to join path segments.",32,null],[13,"Bevel","","A bevelled corner is to be used to join path segments. The bevel shape is a triangle that fills the area between the two stroked segments.",32,null],[3,"StrokeOptions","","Parameters for the tessellator.",null,null],[12,"start_cap","","What cap to use at the start of each sub-path.",33,null],[12,"end_cap","","What cap to use at the end of each sub-path.",33,null],[12,"line_join","","See the SVG specification.",33,null],[12,"line_width","","Line width",33,null],[12,"miter_limit","","See the SVG specification.",33,null],[12,"tolerance","","Maximum allowed distance to the path when building an approximation.",33,null],[12,"apply_line_width","","Apply line width",33,null],[3,"FontId","","Id for a font, the default `FontId(0)` will always be present in a `GlyphBrush`",null,null],[12,"0","","",34,null],[4,"Align","","Describes horizontal alignment preference for positioning & bounds.",null,null],[13,"Left","","Leftmost character is immediately to the right of the render position. Bounds start from the render position and advance rightwards.",35,null],[13,"Center","","Leftmost & rightmost characters are equidistant to the render position. Bounds start from the render position and advance equally left & right.",35,null],[13,"Right","","Rightmost character is immetiately to the left of the render position. Bounds start from the render position and advance leftwards.",35,null],[6,"Scale","","Aliased type to allow lib usage without declaring underlying rusttype lib",null,null],[3,"CanvasGeneric","","A generic canvas independent of graphics backend. This type should probably never be used directly; use `ggez::graphics::Canvas` instead.",null,null],[3,"DrawParam","","A struct containing all the necessary info for drawing a Drawable.",null,null],[3,"PrimitiveDrawParam","","A `DrawParam` that has been crunched down to a single matrix. Useful for doing matrix-based coordiante transformations, I hope.",null,null],[12,"matrix","","The transform matrix for the DrawParams",36,null],[12,"src","","a portion of the drawable to clip, as a fraction of the whole image. Defaults to the whole image (1.0) if omitted.",36,null],[12,"color","","A color to draw the target with. Default: white.",36,null],[3,"ImageGeneric","","Generic in-GPU-memory image data available to be drawn on the screen.",null,null],[3,"MeshBuilder","","A builder for creating `Mesh`es.",null,null],[3,"Mesh","","2D polygon mesh.",null,null],[3,"EmptyConst","","A type for empty shader data for shaders that do not require any additional data to be sent to the GPU",null,null],[3,"ShaderGeneric","","A `ShaderGeneric` reprensents a handle user-defined shader that can be used with a ggez graphics context that is generic over `gfx::Resources`",null,null],[3,"ShaderLock","","A lock for RAII shader regions. The shader automatically gets cleared once the lock goes out of scope, restoring the previous shader (if any).",null,null],[3,"BitmapFont","","A bitmap font where letter widths are infered",null,null],[3,"Text","","Drawable text created from a `Font`.",null,null],[3,"TextFragment","","A piece of text with optional color, font and font scale information. These options take precedence over any similar field/argument. Can be implicitly constructed from `String`, `(String, Color)`, and `(String, FontId, Scale)`.",null,null],[12,"text","","Text string itself.",37,null],[12,"color","","Fragment's color, defaults to text's color.",37,null],[12,"font_id","","Fragment's font ID, defaults to text's font ID.",37,null],[12,"scale","","Fragment's scale, defaults to text's scale.",37,null],[3,"TextCached","","Drawable text. Can be either monolithic, or consist of differently-formatted fragments.",null,null],[3,"Rect","","A simple 2D rectangle.",null,null],[12,"x","","X coordinate of the left edge of the rect.",38,null],[12,"y","","Y coordinate of the top edge of the rect.",38,null],[12,"w","","Total width of the rect",38,null],[12,"h","","Total height of the rect.",38,null],[3,"Color","","A RGBA color in the `sRGB` color space represented as `f32`'s in the range `[0.0-1.0]`",null,null],[12,"r","","Red component",39,null],[12,"g","","Green component",39,null],[12,"b","","Blue component",39,null],[12,"a","","Alpha component",39,null],[3,"GlBackendSpec","","A backend specification for OpenGL. This is different from `conf::Backend` because this needs to be its own struct to implement traits upon, and because there may need to be a layer of translation between what the user specifies in the config, and what the graphics backend init code actually gets.",null,null],[3,"Vertex","","Internal structure containing vertex data.",null,null],[12,"pos","","",40,null],[12,"uv","","",40,null],[3,"InstanceProperties","","Internal structure containing values that are different for each drawable object.",null,null],[12,"src","","",41,null],[12,"col1","","",41,null],[12,"col2","","",41,null],[12,"col3","","",41,null],[12,"col4","","",41,null],[12,"color","","",41,null],[3,"Globals","","Internal structure containing global shader state.",null,null],[12,"mvp_matrix","","",42,null],[4,"ImageFormat","","The supported formats for saving an image.",null,null],[13,"Png","",".png image format (defaults to RGBA with 8-bit channels.)",43,null],[4,"BlendMode","","An enum for specifying default and custom blend modes",null,null],[13,"Add","","When combining two fragments, add their values together, saturating at 1.0",44,null],[13,"Subtract","","When combining two fragments, subtract the source value from the destination value",44,null],[13,"Alpha","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",44,null],[13,"Invert","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",44,null],[13,"Multiply","","When combining two fragments, multiply their values together.",44,null],[13,"Replace","","When combining two fragments, choose the source value",44,null],[13,"Lighten","","When combining two fragments, choose the lighter value",44,null],[13,"Darken","","When combining two fragments, choose the darker value",44,null],[4,"Font","","A font that defines the shape of characters drawn on the screen. Can be created from a .ttf file or from an image (bitmap fonts).",null,null],[13,"BitmapFontVariant","","A bitmap font where letter widths are infered",45,null],[13,"GlyphFont","","A TrueType font stored in `GraphicsContext::glyph_brush`",45,null],[4,"DrawMode","","Specifies whether a shape should be drawn filled or as an outline.",null,null],[13,"Line","","A stroked line with the given width.",46,null],[13,"Fill","","A filled shape.",46,null],[13,"CustomLine","","A stroked line with given parameters, see `StrokeOptions` documentation.",46,null],[13,"CustomFill","","A filled shape with given parameters, see `FillOptions` documentation.",46,null],[4,"FilterMode","","Specifies what blending method to use when scaling up/down images.",null,null],[13,"Linear","","Use linear interpolation",47,null],[13,"Nearest","","Use nearest-neighbor interpolation",47,null],[5,"set_canvas","","Set the canvas to render to. Specifying `Option::None` will cause all rendering to be done directly to the screen.",null,{"inputs":[{"name":"context"},{"generics":["canvas"],"name":"option"}],"output":null}],[5,"use_shader","","Use a shader until the returned lock goes out of scope",null,{"inputs":[{"name":"context"},{"name":"shader"}],"output":{"name":"shaderlock"}}],[5,"set_shader","","Set the current  shader for the Context to render with",null,{"inputs":[{"name":"context"},{"name":"shader"}],"output":null}],[5,"clear_shader","","Clears the the current shader for the Context, restoring the default shader.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"clear","","Clear the screen to the background color. TODO: Into ?",null,{"inputs":[{"name":"context"},{"name":"color"}],"output":null}],[5,"draw","","Draws the given `Drawable` object to the screen by calling its `draw()` method.",null,{"inputs":[{"name":"context"},{"name":"d"},{"name":"t"}],"output":{"name":"gameresult"}}],[5,"draw_primitive","","Draws the given `Drawable` object to the screen by calling its `draw_ex()` method.",null,{"inputs":[{"name":"context"},{"name":"d"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[5,"present","","Tells the graphics system to actually put everything on the screen. Call this at the end of your `EventHandler`'s `draw()` method.",null,{"inputs":[{"name":"context"}],"output":{"name":"gameresult"}}],[5,"screenshot","","Take a screenshot by outputting the current render surface (screen or selected canvas) to a PNG file.",null,{"inputs":[{"name":"context"}],"output":{"generics":["image"],"name":"gameresult"}}],[5,"circle","","Draw a circle.",null,{"inputs":[{"name":"context"},{"name":"color"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"}],"output":{"name":"gameresult"}}],[5,"ellipse","","Draw an ellipse.",null,{"inputs":[{"name":"context"},{"name":"color"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"gameresult"}}],[5,"line","","Draws a line of one or more connected segments.",null,null],[5,"points","","Draws points (as rectangles)",null,null],[5,"polygon","","Draws a closed polygon",null,null],[5,"rectangle","","Draws a rectangle.",null,{"inputs":[{"name":"context"},{"name":"color"},{"name":"drawmode"},{"name":"rect"}],"output":{"name":"gameresult"}}],[5,"get_default_filter","","Get the default filter mode for new images.",null,{"inputs":[{"name":"context"}],"output":{"name":"filtermode"}}],[5,"get_renderer_info","","Returns a string that tells a little about the obtained rendering mode. It is supposed to be human-readable and will change; do not try to parse information out of it!",null,{"inputs":[{"name":"context"}],"output":{"generics":["string"],"name":"gameresult"}}],[5,"get_screen_coordinates","","Returns a rectangle defining the coordinate system of the screen. It will be `Rect { x: left, y: top, w: width, h: height }`",null,{"inputs":[{"name":"context"}],"output":{"name":"rect"}}],[5,"set_default_filter","","Sets the default filter mode used to scale images.",null,{"inputs":[{"name":"context"},{"name":"filtermode"}],"output":null}],[5,"set_screen_coordinates","","Sets the bounds of the screen viewport.",null,{"inputs":[{"name":"context"},{"name":"rect"}],"output":{"name":"gameresult"}}],[5,"set_projection","","Sets the raw projection matrix to the given homogeneous transformation matrix.",null,{"inputs":[{"name":"context"},{"generics":["f32"],"name":"matrix4"}],"output":null}],[5,"transform_projection","","Premultiplies the given transformation matrix with the current projection matrix",null,{"inputs":[{"name":"context"},{"generics":["f32"],"name":"matrix4"}],"output":null}],[5,"get_projection","","Gets a copy of the context's raw projection matrix",null,{"inputs":[{"name":"context"}],"output":{"generics":["f32"],"name":"matrix4"}}],[5,"push_transform","","Pushes a homogeneous transform matrix to the top of the transform (model) matrix stack of the `Context`. If no matrix is given, then pushes a copy of the current transform matrix to the top of the stack.",null,{"inputs":[{"name":"context"},{"generics":["matrix4"],"name":"option"}],"output":null}],[5,"pop_transform","","Pops the transform matrix off the top of the transform (model) matrix stack of the `Context`.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"set_transform","","Sets the current model transformation to the given homogeneous transformation matrix.",null,{"inputs":[{"name":"context"},{"generics":["f32"],"name":"matrix4"}],"output":null}],[5,"get_transform","","Gets a copy of the context's current transform matrix",null,{"inputs":[{"name":"context"}],"output":{"generics":["f32"],"name":"matrix4"}}],[5,"transform","","Premultiplies the given transform with the current model transform.",null,{"inputs":[{"name":"context"},{"generics":["f32"],"name":"matrix4"}],"output":null}],[5,"origin","","Sets the current model transform to the origin transform (no transformation)",null,{"inputs":[{"name":"context"}],"output":null}],[5,"apply_transformations","","Calculates the new total transformation (Model-View-Projection) matrix based on the matrices at the top of the transform and view matrix stacks and sends it to the graphics card.",null,{"inputs":[{"name":"context"}],"output":{"name":"gameresult"}}],[5,"set_blend_mode","","Sets the blend mode of the currently active shader program",null,{"inputs":[{"name":"context"},{"name":"blendmode"}],"output":{"name":"gameresult"}}],[5,"set_mode","","Sets the window mode, such as the size and other properties.",null,{"inputs":[{"name":"context"},{"name":"windowmode"}],"output":{"name":"gameresult"}}],[5,"set_fullscreen","","Sets the window to fullscreen or back.",null,{"inputs":[{"name":"context"},{"name":"fullscreentype"}],"output":{"name":"gameresult"}}],[5,"set_resolution","","Sets the window resolution based on the specified width and height.",null,{"inputs":[{"name":"context"},{"name":"u32"},{"name":"u32"}],"output":{"name":"gameresult"}}],[5,"set_window_icon","","Sets the window icon.",null,{"inputs":[{"name":"context"},{"name":"option"}],"output":{"name":"gameresult"}}],[5,"set_window_title","","Sets the window title.",null,{"inputs":[{"name":"context"},{"name":"str"}],"output":null}],[5,"get_window","","Returns a reference to the SDL window. Ideally you should not need to use this because ggez would provide all the functions you need without having to dip into SDL itself.  But life isn't always ideal.",null,{"inputs":[{"name":"context"}],"output":{"name":"window"}}],[5,"get_size","","Returns the size of the window in pixels as (width, height), including borders, titlebar, etc. Returns zeros if window doesn't exist.",null,null],[5,"get_drawable_size","","Returns the size of the window's underlying drawable in pixels as (width, height). Returns zeros if window doesn't exist.",null,null],[5,"get_factory","","Returns the gfx-rs `Factory` object for ggez's rendering context.",null,{"inputs":[{"name":"context"}],"output":{"name":"factory"}}],[5,"get_device","","Returns the gfx-rs `Device` object for ggez's rendering context.",null,{"inputs":[{"name":"context"}],"output":{"name":"device"}}],[5,"get_encoder","","Returns the gfx-rs `Encoder` object for ggez's rendering context.",null,{"inputs":[{"name":"context"}],"output":{"name":"encoder"}}],[5,"get_depth_view","","Returns the gfx-rs depth target object for ggez's rendering context.",null,{"inputs":[{"name":"context"}],"output":{"generics":["resources"],"name":"rawdepthstencilview"}}],[5,"get_screen_render_target","","Returns the gfx-rs color target object for ggez's rendering context.",null,{"inputs":[{"name":"context"}],"output":{"generics":["resources"],"name":"rawrendertargetview"}}],[5,"get_gfx_objects","","Returns raw `gfx-rs` state objects, if you want to use `gfx-rs` to write your own graphics pipeline then this gets you the interfaces you need to do so. Returns all the relevant objects at once; getting them one by one is awkward 'cause it tends to create double-borrows on the Context object.",null,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"drawparam"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"drawparam"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"drawparam"}],"output":{"name":"bool"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new DrawParam with default values.",49,{"inputs":[],"output":{"name":"self"}}],[11,"src","","Set the source rect",49,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"dest","","Set the dest point",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"color","","TODO",49,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"rotation","","TODO",49,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"scale","","TODO",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"offset","","TODO",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"shear","","TODO",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"from","","",49,null],[11,"from","","",49,null],[11,"from","","",49,null],[11,"from","","",49,null],[11,"from","","",49,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"primitivedrawparam"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"primitivedrawparam"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"primitivedrawparam"}],"output":{"name":"bool"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",36,{"inputs":[{"name":"drawparam"}],"output":{"name":"self"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"imagegeneric"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"meshbuilder"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new MeshBuilder.",51,{"inputs":[],"output":{"name":"self"}}],[11,"line","","Create a new mesh for a line of one or more connected segments.",51,null],[11,"circle","","Create a new mesh for a circle.",51,{"inputs":[{"name":"self"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"ellipse","","Create a new mesh for an ellipse.",51,{"inputs":[{"name":"self"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"polyline","","Create a new mesh for a series of connected lines.",51,null],[11,"polygon","","Create a new mesh for a closed polygon.",51,null],[11,"triangles","","Create a new `Mesh` from a raw list of triangles.",51,null],[11,"build","","Takes the accumulated geometry and load it into GPU memory, creating a single `Mesh`.",51,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["mesh"],"name":"gameresult"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"new_line","","Create a new mesh for a line of one or more connected segments.",52,null],[11,"new_circle","","Create a new mesh for a circle.",52,{"inputs":[{"name":"context"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["mesh"],"name":"gameresult"}}],[11,"new_ellipse","","Create a new mesh for an ellipse.",52,{"inputs":[{"name":"context"},{"name":"drawmode"},{"name":"p"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["mesh"],"name":"gameresult"}}],[11,"new_polyline","","Create a new mesh for series of connected lines.",52,null],[11,"new_polygon","","Create a new mesh for closed polygon.",52,null],[11,"from_triangles","","Create a new `Mesh` from a raw list of triangles.",52,null],[11,"draw_primitive","","",52,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",52,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"emptyconst"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",53,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"shadergeneric"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"shaderlock"}}],[11,"drop","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bitmapfont"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Load a new TTF font from the given file.",45,{"inputs":[{"name":"context"},{"name":"p"},{"name":"u32"}],"output":{"generics":["font"],"name":"gameresult"}}],[11,"new_bitmap","","Creates a bitmap font from a long image of its alphabet, specified by `path`. The width of each individual chars is assumed to be to be image(path).width/glyphs.chars().count()",45,{"inputs":[{"name":"context"},{"name":"p"},{"name":"str"}],"output":{"generics":["font"],"name":"gameresult"}}],[11,"new_variable_width_bitmap_font","","Creates a bitmap font from a long image of its alphabet. Each letter must be separated from the last by a fully transparent column of pixels. The width of each letter is infered from these letter boundaries.",45,{"inputs":[{"name":"context"},{"name":"p"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["font"],"name":"gameresult"}}],[11,"new_glyph_font_bytes","","Loads a new TrueType font from given bytes and into `GraphicsContext::glyph_brush`.",45,null],[11,"new_glyph_font","","Loads a new TrueType font from given file and into `GraphicsContext::glyph_brush`.",45,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"gameresult"}}],[11,"get_glyph_font_by_id","","Retrieves a loaded font from `GraphicsContext::glyph_brush`.",45,{"inputs":[{"name":"context"},{"name":"fontid"}],"output":{"name":"gameresult"}}],[11,"default_font","","Returns baked-in default font (currently DejaVuSerif.ttf). Note it does create a new `Font` object with every call; although the actual data should be shared.",45,{"inputs":[{"name":"context"}],"output":{"name":"gameresult"}}],[11,"get_height","","Get the height of the Font in pixels.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_width","","Returns the width a line of text needs, in pixels. Does not handle line-breaks. TODO: Probably made obsolete by GlyphFont",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"get_wrap","","Breaks the given text into lines that will not exceed `wrap_limit` pixels in length when drawn with the given font. It accounts for newlines correctly but does not try to break words or handle hyphenated words; it just breaks at whitespace.  (It also doesn't preserve whitespace.)",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"new","","Renders a new `Text` from the given `Font`.",57,{"inputs":[{"name":"context"},{"name":"str"},{"name":"font"}],"output":{"generics":["text"],"name":"gameresult"}}],[11,"width","","Returns the width of the rendered text, in pixels.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of the rendered text, in pixels.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"contents","","Returns the string that the text represents.",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_dimensions","","Returns the dimensions of the rendered text.",57,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"get_filter","","Get the filter mode for the the rendered text.",57,{"inputs":[{"name":"self"}],"output":{"name":"filtermode"}}],[11,"set_filter","","Set the filter mode for the the rendered text.",57,{"inputs":[{"name":"self"},{"name":"filtermode"}],"output":null}],[11,"get_image","","Returns a reference to the `Image` contained by the `Text` object.",57,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"get_image_mut","","Returns a mutable  reference to the `Image` contained by the `Text` object.",57,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"into_inner","","Unwraps the `Image` contained by the `Text` object.",57,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"draw_primitive","","",57,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",57,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"textfragment"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new fragment from `String` or `&str`.",37,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"set_color","","Set fragment's color, overrides text's color.",37,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"textfragment"}}],[11,"set_font","","Set fragment's font, overrides text's font.",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"textfragment"}}],[11,"set_scale","","Set fragment's scale, overrides text's scale.",37,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"textfragment"}}],[11,"from","","",37,{"inputs":[{"name":"str"}],"output":{"name":"textfragment"}}],[11,"from","","",37,{"inputs":[{"name":"char"}],"output":{"name":"textfragment"}}],[11,"from","","",37,{"inputs":[{"name":"string"}],"output":{"name":"textfragment"}}],[11,"into","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fontid"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a `TextCached` from a `TextFragment`.",58,{"inputs":[{"name":"f"}],"output":{"generics":["textcached"],"name":"gameresult"}}],[11,"new_empty","","Creates an empty `TextCached`.",58,{"inputs":[],"output":{"generics":["textcached"],"name":"gameresult"}}],[11,"add_fragment","","Appends a `TextFragment`.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"textcached"}}],[11,"fragments","","Returns a slice with all fragments, for reading.",58,null],[11,"fragments_mut","","Returns a mutable slice with all fragments.",58,null],[11,"set_bounds","","Specifies rectangular dimensions to try and fit contents inside of, by wrapping, and alignment within the bounds.",58,{"inputs":[{"name":"self"},{"name":"p"},{"name":"align"}],"output":{"name":"textcached"}}],[11,"set_font","","Specifies text's font and font scale; used for fragments that don't have their own.",58,{"inputs":[{"name":"self"},{"name":"fi"},{"name":"scale"}],"output":{"name":"textcached"}}],[11,"contents","","Returns the string that the text represents.",58,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"width","","Returns the width of formatted and wrapped text, in screen coordinates.",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of formatted and wrapped text, in screen coordinates.",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"u32"}}],[11,"queue","","Queues the `TextCached` to be drawn by `draw_queued()`. `relative_dest` is relative to the `DrawParam::dest` passed to `draw_queued()`. Note, any `TextCached` drawn via `graphics::draw()` will also draw the queue.",58,{"inputs":[{"name":"self"},{"name":"context"},{"name":"p"},{"generics":["color"],"name":"option"}],"output":null}],[11,"queue_raw","","Exposes `gfx_glyph`'s `GlyphBrush::queue()` and `GlyphBrush::queue_custom_layout()`, in case `ggez`' API is insufficient.",58,{"inputs":[{"name":"context"},{"name":"s"},{"name":"option"}],"output":null}],[11,"draw_queued","","Draws all of `queue()`d `TextCached`. `DrawParam` apply to everything in the queue; offset is in screen coordinates; color is ignored - specify it when `queue()`ing instead.",58,{"inputs":[{"name":"context"},{"name":"d"}],"output":{"name":"gameresult"}}],[11,"draw_primitive","","",58,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",58,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"rect"}}],[11,"new","","Create a new rect.",38,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"fraction","","Creates a new rect a la Love2D's love.graphics.newQuad, as a fraction of the reference rect's size.",38,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"new_i32","","Create a new rect from i32 coordinates.",38,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"zero","","Create a new `Rect` with all values zero.",38,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new `Rect` at 0,0 with width and height 1.",38,{"inputs":[],"output":{"name":"self"}}],[11,"point","","Gets the `Rect`'s x and y coordinates as a `Point2`.",38,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"point2"}}],[11,"left","","Returns the left edge of the `Rect`",38,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"right","","Returns the right edge of the `Rect`",38,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"top","","Returns the top edge of the `Rect`",38,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"bottom","","Returns the bottom edge of the `Rect`",38,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"contains","","Checks whether the `Rect` contains a `Point`",38,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"point2"}],"output":{"name":"bool"}}],[11,"overlaps","","Checks whether the `Rect` overlaps another `Rect`",38,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"translate","","Translates the `Rect` by an offset of (x, y)",38,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"vector2"}],"output":null}],[11,"move_to","","Moves the `Rect`'s origin to (x, y)",38,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"point2"}],"output":null}],[11,"scale","","Scales the `Rect` by a factor of (sx, sy), growing towards the bottom-left",38,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"from","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Color from four f32's in the range [0.0-1.0]",39,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"from_rgba","","Create a new Color from four u8's in the range `[0-255]`",39,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[11,"from_rgb","","Create a new Color from three u8's in the range `[0-255]`, with the alpha component fixed to 255 (opaque)",39,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[11,"to_rgba","","Return a tuple of four u8's in the range `[0-255]` with the Color's components.",39,null],[11,"to_rgb","","Return a tuple of three u8's in the range `[0-255]` with the Color's components.",39,null],[11,"from_rgba_u32","","Convert a packed u32 containing 0xRRGGBBAA into a Color.conf",39,{"inputs":[{"name":"u32"}],"output":{"name":"color"}}],[11,"from_rgb_u32","","Convert a packed u32 containing 0x00RRGGBB into a Color. This lets you do things like `Color::from_rgb_u32(0xCD09AA)` easily if you want.",39,{"inputs":[{"name":"u32"}],"output":{"name":"color"}}],[11,"to_rgba_u32","","Convert a Color into a packed u32, containing 0xRRGGBBAA as bytes.",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_rgb_u32","","Convert a Color into a packed u32, containing 0x00RRGGBB as bytes.",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","Convert a `(R, G, B, A)` tuple of `u8`'s in the range 0-255 into a Color",39,null],[11,"from","","Convert a `(R, G, B)` tuple of `u8`'s in the range 0-255 into a Color, with a value of 255 for the alpha element (ie, no transparency.)",39,null],[11,"from","","Turns an `[R, G, B, A] array of f32's into a Color with no format changes. All inputs should be in the range`[0.0-1.0]`.",39,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"drawmode"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"filtermode"}}],[11,"from","","",47,{"inputs":[{"name":"filtermethod"}],"output":{"name":"self"}}],[0,"spritebatch","","A `SpriteBatch` is a way to efficiently draw a large number of copies of the same image, or part of the same image.  It's useful for implementing tiled maps, spritesheets, particles, and other such things.",null,null],[3,"SpriteBatch","ggez::graphics::spritebatch","A `SpriteBatch` draws a number of copies of the same image, using a single draw call.",null,null],[3,"SpriteIdx","","An index of a particular sprite in a `SpriteBatch`.",null,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"spritebatch"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"spriteidx"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"spriteidx"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"new","","Creates a new `SpriteBatch`, drawing with the given image.",59,{"inputs":[{"name":"image"}],"output":{"name":"self"}}],[11,"add","","Adds a new sprite to the sprite batch.",59,{"inputs":[{"name":"self"},{"name":"drawparam"}],"output":{"name":"spriteidx"}}],[11,"set","","Alters a sprite in the batch to use the given draw params",59,{"inputs":[{"name":"self"},{"name":"spriteidx"},{"name":"drawparam"}],"output":{"name":"gameresult"}}],[11,"clear","","Removes all data from the sprite batch.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"into_inner","","Unwraps the contained `Image`",59,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"set_image","","Replaces the contained `Image`, returning the old one.",59,{"inputs":[{"name":"self"},{"name":"image"}],"output":{"name":"image"}}],[11,"get_filter","","Get the filter mode for the SpriteBatch.",59,{"inputs":[{"name":"self"}],"output":{"name":"filtermode"}}],[11,"set_filter","","Set the filter mode for the SpriteBatch.",59,{"inputs":[{"name":"self"},{"name":"filtermode"}],"output":null}],[11,"draw_primitive","","",59,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",59,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[0,"pipe","ggez::graphics","",null,null],[3,"Data","ggez::graphics::pipe","",null,null],[12,"vbuf","","",61,null],[12,"tex","","",61,null],[12,"globals","","",61,null],[12,"rect_instance_properties","","",61,null],[12,"out","","",61,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",62,null],[12,"tex","","",62,null],[12,"globals","","",62,null],[12,"rect_instance_properties","","",62,null],[12,"out","","",62,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"init"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"init"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"init"}],"output":{"name":"bool"}}],[11,"link_to","","",62,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"generics":["initerror"],"name":"result"}}],[11,"bake_to","","",61,null],[6,"Canvas","ggez::graphics","A canvas that can be rendered to instead of the screen (sometimes referred to as \"render target\" or \"render to texture\"). Set the canvas with the `ggez::graphics::set_canvas()` function, and then anything you draw will be drawn to the canvas instead of the screen.",null,null],[6,"Image","","In-GPU-memory image data available to be drawn on the screen, using the OpenGL backend.",null,null],[6,"ShaderId","","An ID used by the `GraphicsContext` to uniquely identify a shader",null,null],[6,"Shader","","A `Shader` represents a handle to a user-defined shader that can be used with a ggez graphics context",null,null],[6,"WrapMode","","Specifies how to wrap textures.",null,null],[17,"DEFAULT_FONT_SCALE","","Default scale, used as `Scale::uniform(DEFAULT_FONT_SCALE)` when no explicit scale is given.",null,null],[17,"WHITE","","White",null,null],[17,"BLACK","","Black",null,null],[8,"ShaderHandle","","A trait that is used to create trait objects to abstract away the Structure type of the constant data for drawing",null,null],[10,"draw","","Draw with the current Shader",64,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"slice"},{"name":"data"}],"output":{"name":"gameresult"}}],[10,"set_blend_mode","","Sets the shader program's blend mode",64,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"gameresult"}}],[10,"get_blend_mode","","Gets the shader program's current blend mode",64,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[8,"BackendSpec","","A marker trait saying that something is a label for a particular backend, with associated gfx-rs types for that backend.",null,null],[16,"SurfaceType","","Surface type",65,null],[16,"Resources","","gfx resource type",65,null],[16,"Factory","","gfx factory type",65,null],[16,"CommandBuffer","","gfx command buffer type",65,null],[16,"Device","","gfx device type",65,null],[11,"raw_to_typed_shader_resource","","A helper function to take a RawShaderResourceView and turn it into a typed one based on the surface type defined in a `BackendSpec`",65,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[8,"Drawable","","All types that can be drawn on the screen implement the `Drawable` trait.",null,null],[10,"draw_primitive","","Actually draws the object to the screen.",66,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"draw","","Draws the drawable onto the rendering target.",66,{"inputs":[{"name":"self"},{"name":"context"},{"name":"d"}],"output":{"name":"gameresult"}}],[10,"set_blend_mode","","Sets the blend mode to be used when drawing this drawable. This overrides the general `graphics::set_blend_mode()`. If `None` is set, defers to the blend mode set by `graphics::set_blend_mode()`.",66,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[10,"get_blend_mode","","Gets the blend mode to be used when drawing this drawable.",66,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"glbackendspec"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"glbackendspec"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"glbackendspec"}],"output":{"name":"bool"}}],[11,"default","","Return `GlBackendSpec { major: 3, minor: 2 }`",67,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",67,null],[11,"from","","",67,{"inputs":[{"name":"backend"}],"output":{"name":"self"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vertex"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"vertex"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"vertex"}],"output":{"name":"bool"}}],[11,"query","","",40,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"instanceproperties"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"instanceproperties"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"instanceproperties"}],"output":{"name":"bool"}}],[11,"query","","",41,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"globals"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"globals"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"globals"}],"output":{"name":"bool"}}],[11,"query","","",42,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",41,{"inputs":[{"name":"primitivedrawparam"}],"output":{"name":"self"}}],[11,"from","ggez::error","",12,{"inputs":[{"name":"creationerror"}],"output":{"name":"self"}}],[0,"keyboard","ggez","Keyboard utility functions; allow querying state of keyboard keys and modifiers.",null,null],[3,"KeyMods","ggez::keyboard","Bitflags describing state of keyboard modifiers, such as Control or Shift.",null,null],[3,"KeyboardContext","","Tracks held down keyboard keys, active keyboard modifiers, and figures out if the system is sending repeat keystrokes.",null,null],[5,"is_key_pressed","","Checks if a key is currently pressed down.",null,{"inputs":[{"name":"context"},{"name":"keycode"}],"output":{"name":"bool"}}],[5,"is_key_repeated","","Checks if the last keystroke sent by the system is repeated, like when a key is held down for a period of time.",null,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[5,"get_pressed_keys","","Returns a slice with currently pressed down keys.",null,null],[5,"is_mod_active","","Checks if keyboard modifier (or several) is active.",null,{"inputs":[{"name":"context"},{"name":"keymods"}],"output":{"name":"bool"}}],[5,"get_active_mods","","Returns currently active keyboard modifiers.",null,{"inputs":[{"name":"context"}],"output":{"name":"keymods"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"keymods"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"ordering"}}],[11,"hash","","",68,null],[11,"default","","",68,{"inputs":[],"output":{"name":"keymods"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","No modifiers; equivalent to `KeyMods::default()` and `KeyMods::empty()`.",68,null],[18,"SHIFT","","Left or right Shift key.",68,null],[18,"CTRL","","Left or right Control key.",68,null],[18,"ALT","","Left or right Alt key.",68,null],[18,"LOGO","","Left or right Win/Cmd/equivalent key.",68,null],[11,"empty","","Returns an empty set of flags.",68,{"inputs":[],"output":{"name":"keymods"}}],[11,"all","","Returns the set containing all flags.",68,{"inputs":[],"output":{"name":"keymods"}}],[11,"bits","","Returns the raw value of the flags currently stored.",68,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",68,{"inputs":[{"name":"u8"}],"output":{"generics":["keymods"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",68,{"inputs":[{"name":"u8"}],"output":{"name":"keymods"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",68,{"inputs":[{"name":"self"},{"name":"keymods"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"keymods"}}],[11,"bitor_assign","","Adds the set of flags.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"keymods"}}],[11,"bitxor_assign","","Toggles the set of flags.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"keymods"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":{"name":"keymods"}}],[11,"sub_assign","","Disables all flags enabled in the set.",68,{"inputs":[{"name":"self"},{"name":"keymods"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",68,{"inputs":[{"name":"self"}],"output":{"name":"keymods"}}],[11,"extend","","",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",68,{"inputs":[{"name":"t"}],"output":{"name":"keymods"}}],[11,"from","","",68,{"inputs":[{"name":"modifiersstate"}],"output":{"name":"self"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"keyboardcontext"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"self"}}],[0,"mouse","ggez","Mouse utility functions.",null,null],[4,"CursorState","ggez::mouse","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",70,null],[13,"Hide","","The cursor will be invisible when over the window.",70,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",70,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",71,null],[13,"Crosshair","","A simple crosshair.",71,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",71,null],[13,"Arrow","","Self explanatory.",71,null],[13,"Move","","Indicates something is to be moved.",71,null],[13,"Text","","Indicates text that may be selected or edited.",71,null],[13,"Wait","","Program busy indicator.",71,null],[13,"Help","","Help indicator (often rendered as a \"?\")",71,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",71,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",71,null],[13,"ContextMenu","","",71,null],[13,"NoneCursor","","",71,null],[13,"Cell","","",71,null],[13,"VerticalText","","",71,null],[13,"Alias","","",71,null],[13,"Copy","","",71,null],[13,"NoDrop","","",71,null],[13,"Grab","","",71,null],[13,"Grabbing","","",71,null],[13,"AllScroll","","",71,null],[13,"ZoomIn","","",71,null],[13,"ZoomOut","","",71,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",71,null],[13,"NResize","","",71,null],[13,"NeResize","","",71,null],[13,"NwResize","","",71,null],[13,"SResize","","",71,null],[13,"SeResize","","",71,null],[13,"SwResize","","",71,null],[13,"WResize","","",71,null],[13,"EwResize","","",71,null],[13,"NsResize","","",71,null],[13,"NeswResize","","",71,null],[13,"NwseResize","","",71,null],[13,"ColResize","","",71,null],[13,"RowResize","","",71,null],[3,"MouseContext","","Stores state information for the mouse, what little of it there is.",null,null],[5,"get_cursor_type","","Returns the current mouse cursor type of the window.",null,{"inputs":[{"name":"context"}],"output":{"name":"mousecursor"}}],[5,"set_cursor_type","","Modifies the mouse cursor type of the window.",null,{"inputs":[{"name":"context"},{"name":"mousecursor"}],"output":null}],[5,"get_cursor_state","","Set whether or not the mouse is grabbed (confined to the window) or hidden (invisible).",null,{"inputs":[{"name":"context"}],"output":{"name":"cursorstate"}}],[5,"set_cursor_state","","Set whether or not the mouse is grabbed (confined to the window) or hidden (invisible).",null,{"inputs":[{"name":"context"},{"name":"cursorstate"}],"output":{"name":"gameresult"}}],[5,"get_position","","Get the current position of the mouse cursor, in pixels. Complement to `set_position()`. Uses strictly window-only coordinates.",null,{"inputs":[{"name":"context"}],"output":{"generics":["f32"],"name":"point2"}}],[5,"get_delta","","Get the distance the cursor was moved during last frame, in pixels.",null,{"inputs":[{"name":"context"}],"output":{"generics":["f32"],"name":"point2"}}],[5,"set_position","","Set the current position of the mouse cursor, in pixels. Uses strictly window-only coordinates.",null,{"inputs":[{"name":"context"},{"generics":["f32"],"name":"point2"}],"output":{"name":"gameresult"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"mousecontext"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[0,"timer","ggez","Timing and measurement functions.",null,null],[3,"TimeContext","ggez::timer","A structure that contains our time-tracking state.",null,null],[5,"get_delta","","Get the time between the start of the last frame and the current one; in other words, the length of the last frame.",null,{"inputs":[{"name":"context"}],"output":{"name":"duration"}}],[5,"get_average_delta","","Gets the average time of a frame, averaged over the last 200 frames.",null,{"inputs":[{"name":"context"}],"output":{"name":"duration"}}],[5,"duration_to_f64","","A convenience function to convert a Rust `Duration` type to a (less precise but more useful) f64.",null,{"inputs":[{"name":"duration"}],"output":{"name":"f64"}}],[5,"f64_to_duration","","A convenience function to create a Rust `Duration` type from a (less precise but more useful) f64.",null,{"inputs":[{"name":"f64"}],"output":{"name":"duration"}}],[5,"get_fps","","Gets the FPS of the game, averaged over the last 200 frames.",null,{"inputs":[{"name":"context"}],"output":{"name":"f64"}}],[5,"get_time_since_start","","Returns the time since the game was initialized, as reported by the system clock.",null,{"inputs":[{"name":"context"}],"output":{"name":"duration"}}],[5,"check_update_time","","This function will return true if the time since the last `update()` call has been equal to or greater to the update FPS indicated by the `target_fps`. It keeps track of fractional frames, so if you want 60 fps (16.67 ms/frame) and the game stutters so that there is 40 ms between `update()` calls, this will return `true` twice, and take the remaining 6.67 ms into account in the next frame.",null,{"inputs":[{"name":"context"},{"name":"u32"}],"output":{"name":"bool"}}],[5,"get_remaining_update_time","","Returns the fractional amount of a frame not consumed by  `check_update_time()`.  For example, if the desired update frame time is 40 ms (25 fps), and 45 ms have passed since the last frame, `check_update_time()` will return `true` and `get_remaining_update_time()` will return 5 ms -- the amount of time \"overflowing\" from one frame to the next.",null,{"inputs":[{"name":"context"}],"output":{"name":"duration"}}],[5,"sleep","","Pauses the current thread for the target duration. Just calls `std::thread::sleep()` so it's as accurate as that is (which is usually not very).",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"yield_now","","Yields the current timeslice to the OS.",null,{"inputs":[],"output":null}],[5,"get_ticks","","Gets the number of times the game has gone through its event loop.",null,{"inputs":[{"name":"context"}],"output":{"name":"usize"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `TimeContext` and initializes the start to this instant.",73,{"inputs":[],"output":{"name":"timecontext"}}],[11,"tick","","Update the state of the TimeContext to record that another frame has taken place.  Necessary for the FPS tracking and `check_update_time()` functions to work.",73,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","ggez::filesystem","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"openoptions"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"openoptions"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"openoptions"}],"output":{"name":"bool"}}],[11,"new","","Create a new instance",74,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Open for reading",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Open for writing",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Create the file if it does not exist yet",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Append at the end of the file",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Truncate the file to 0 bytes after opening",74,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"partial_cmp","ggez::graphics","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"fontid"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"horizontalalign"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"ordering"}}],[11,"hash","","",35,null],[11,"hash","","",34,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"horizontalalign"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"fontid"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"fontid"}}],[11,"clone","ggez::event","",13,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"clone","ggez::mouse","",71,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"clone","ggez::event::winit_event","",18,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deviceevent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"clone","ggez::mouse","",70,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"clone","ggez::event::winit_event","",22,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","ggez::event","",14,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"hash","ggez::event::winit_event","",21,null],[11,"hash","ggez::event","",14,null],[11,"hash","ggez::event::winit_event","",23,null],[11,"hash","","",18,null],[11,"hash","ggez::event","",13,null],[11,"eq","ggez::mouse","",71,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"eq","ggez::event::winit_event","",23,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","ggez::event","",14,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","ggez::mouse","",70,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"eq","ggez::event::winit_event","",21,{"inputs":[{"name":"self"},{"name":"modifiersstate"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"modifiersstate"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","ggez::event","",13,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"fmt","ggez::event::winit_event","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::event","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::event::winit_event","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::event","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::mouse","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::event::winit_event","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ggez::mouse","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"cursorstate"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"mousecursor"}}],[11,"default","ggez::event::winit_event","",21,{"inputs":[],"output":{"name":"modifiersstate"}}],[11,"clone","ggez::graphics","",33,{"inputs":[{"name":"self"}],"output":{"name":"strokeoptions"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"linecap"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"linejoin"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"filloptions"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fillrule"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"strokeoptions"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"strokeoptions"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"linejoin"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"fillrule"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"filloptions"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"filloptions"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"strokeoptions"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"filloptions"}}],[11,"clone","ggez::event","",15,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"button"}}],[11,"is_stick","","Returns true if axis is `LeftStickX`, `LeftStickY`, `RightStickX` or `RightStickY`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"second_axis","","Returns the other axis from same element of gamepad, if any.",15,{"inputs":[{"name":"self"}],"output":{"generics":["axis"],"name":"option"}}],[11,"is_action","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_trigger","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_menu","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stick","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dpad","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_nec","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["code"],"name":"option"}}],[11,"new","","Builds a new events loop.",75,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",75,{"inputs":[{"name":"self"}],"output":{"name":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",75,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",75,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",75,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",75,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"default","ggez::graphics","",29,{"inputs":[],"output":{"name":"filloptions"}}],[11,"even_odd","","",29,{"inputs":[],"output":{"name":"filloptions"}}],[11,"tolerance","","",29,{"inputs":[{"name":"f32"}],"output":{"name":"filloptions"}}],[11,"non_zero","","",29,{"inputs":[],"output":{"name":"filloptions"}}],[11,"with_tolerance","","",29,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"filloptions"}}],[11,"with_normals","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"filloptions"}}],[11,"assume_no_intersections","","",29,{"inputs":[{"name":"self"}],"output":{"name":"filloptions"}}],[11,"on_error","","",29,{"inputs":[{"name":"self"},{"name":"onerror"}],"output":{"name":"filloptions"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"strokeoptions"}}],[11,"tolerance","","",33,{"inputs":[{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"with_tolerance","","",33,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"with_line_cap","","",33,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"name":"strokeoptions"}}],[11,"with_start_cap","","",33,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"name":"strokeoptions"}}],[11,"with_end_cap","","",33,{"inputs":[{"name":"self"},{"name":"linecap"}],"output":{"name":"strokeoptions"}}],[11,"with_line_join","","",33,{"inputs":[{"name":"self"},{"name":"linejoin"}],"output":{"name":"strokeoptions"}}],[11,"with_line_width","","",33,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"with_miter_limit","","",33,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"strokeoptions"}}],[11,"dont_apply_line_width","","",33,{"inputs":[{"name":"self"}],"output":{"name":"strokeoptions"}}],[11,"new","","Create a new canvas with the given size and number of samples.",76,{"inputs":[{"name":"context"},{"name":"u32"},{"name":"u32"},{"name":"numsamples"}],"output":{"generics":["canvas"],"name":"gameresult"}}],[11,"with_window_size","","Create a new canvas with the current window dimensions.",76,{"inputs":[{"name":"context"}],"output":{"generics":["canvas"],"name":"gameresult"}}],[11,"get_image","","Gets the backend `Image` that is being rendered to.",76,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"into_inner","","Destroys the Canvas and returns the `Image` it contains.",76,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"draw_primitive","","",76,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",76,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"new","","Load a new image from the file at the given path.",77,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"generics":["image"],"name":"gameresult"}}],[11,"from_rgba8","","Creates a new `Image` from the given buffer of `u8` RGBA values.",77,null],[11,"to_rgba8","","Dumps the `Image`'s data to a `Vec` of `u8` RGBA values.",77,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["vec"],"name":"gameresult"}}],[11,"encode","","Encode the `Image` to the given file format and write it out to the given path.",77,{"inputs":[{"name":"self"},{"name":"context"},{"name":"imageformat"},{"name":"p"}],"output":{"name":"gameresult"}}],[11,"solid","","A little helper function that creates a new Image that is just a solid square of the given size and color.  Mainly useful for debugging.",77,{"inputs":[{"name":"context"},{"name":"u16"},{"name":"color"}],"output":{"generics":["image"],"name":"gameresult"}}],[11,"width","","Return the width of the image.",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Return the height of the image.",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_filter","","Get the filter mode for the image.",77,{"inputs":[{"name":"self"}],"output":{"name":"filtermode"}}],[11,"set_filter","","Set the filter mode for the image.",77,{"inputs":[{"name":"self"},{"name":"filtermode"}],"output":null}],[11,"get_dimensions","","Returns the dimensions of the image.",77,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"get_wrap","","Gets the `Image`'s `WrapMode` along the X and Y axes.",77,null],[11,"set_wrap","","Sets the `Image`'s `WrapMode` along the X and Y axes.",77,{"inputs":[{"name":"self"},{"name":"wrapmode"},{"name":"wrapmode"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"draw_primitive","","",77,{"inputs":[{"name":"self"},{"name":"context"},{"name":"primitivedrawparam"}],"output":{"name":"gameresult"}}],[11,"set_blend_mode","","",77,{"inputs":[{"name":"self"},{"generics":["blendmode"],"name":"option"}],"output":null}],[11,"get_blend_mode","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["blendmode"],"name":"option"}}],[11,"new","","Create a new `Shader` given a gfx pipeline object",78,{"inputs":[{"name":"context"},{"name":"p"},{"name":"p"},{"name":"c"},{"name":"s"},{"name":"option"}],"output":{"generics":["shader"],"name":"gameresult"}}],[11,"from_u8","","Create a new `Shader` directly from source given a gfx pipeline object",78,null],[11,"send","","Send data to the GPU for use with the `Shader`",78,{"inputs":[{"name":"self"},{"name":"context"},{"name":"c"}],"output":{"name":"gameresult"}}],[11,"shader_id","","Gets the shader ID for the `Shader` which is used by the `GraphicsContext` for identifying shaders in its cache",78,{"inputs":[{"name":"self"}],"output":{"name":"shaderid"}}]],"paths":[[3,"Context"],[3,"AudioContext"],[3,"SoundData"],[3,"Source"],[3,"WindowMode"],[3,"WindowSetup"],[3,"Conf"],[4,"FullscreenType"],[4,"MonitorId"],[4,"Backend"],[4,"NumSamples"],[3,"ContextBuilder"],[4,"GameError"],[4,"KeyCode"],[4,"MouseButton"],[4,"Axis"],[4,"Button"],[4,"DeviceEvent"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[3,"ModifiersState"],[4,"MouseScrollDelta"],[4,"TouchPhase"],[4,"WindowEvent"],[8,"EventHandler"],[4,"File"],[3,"Filesystem"],[3,"GamepadContext"],[3,"FillOptions"],[4,"FillRule"],[4,"LineCap"],[4,"LineJoin"],[3,"StrokeOptions"],[3,"FontId"],[4,"Align"],[3,"PrimitiveDrawParam"],[3,"TextFragment"],[3,"Rect"],[3,"Color"],[3,"Vertex"],[3,"InstanceProperties"],[3,"Globals"],[4,"ImageFormat"],[4,"BlendMode"],[4,"Font"],[4,"DrawMode"],[4,"FilterMode"],[3,"CanvasGeneric"],[3,"DrawParam"],[3,"ImageGeneric"],[3,"MeshBuilder"],[3,"Mesh"],[3,"EmptyConst"],[3,"ShaderGeneric"],[3,"ShaderLock"],[3,"BitmapFont"],[3,"Text"],[3,"TextCached"],[3,"SpriteBatch"],[3,"SpriteIdx"],[3,"Data"],[3,"Init"],[3,"Meta"],[8,"ShaderHandle"],[8,"BackendSpec"],[8,"Drawable"],[3,"GlBackendSpec"],[3,"KeyMods"],[3,"KeyboardContext"],[4,"CursorState"],[4,"MouseCursor"],[3,"MouseContext"],[3,"TimeContext"],[3,"OpenOptions"],[3,"EventsLoop"],[6,"Canvas"],[6,"Image"],[6,"Shader"]]};
initSearch(searchIndex);
